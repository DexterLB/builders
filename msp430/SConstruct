# This SConstruct helps build TI msp430
# projects easier with the GCC toolchain.
#
# It supports C, C++ and Assembly source files
#
# It contains the following targets:
# scons             : builds everything
# scons elf         : builds only the elf file
# scons txt         : builds only TI TXT file
# scons dostxt      : builds only TI TXT DOS-encoded file
# scons hex         : builds the hex file
# scons disasm      : builds .s (disassembly)
# scons size        : shows size information

# -------- configuration options ---------

# project name (use a single word, e.g. "myprj")
pname = 'hello'

# target chip name
mcu = 'msp430g2231'

# source files
# .c, .cpp or .S (NOT .s !!! for asm)
# example: ['main.c', 'foo.c', 'lowlevel.S']
sources = '''
main.c
'''.split()

# additional options (e.g. '-I/path/to/mydir', '-lmylib')
options = []

# build directory - all output files will go here
build_dir = 'build'

# optimisation level
# can be 's' (size opt), '1', '2', '3' or '0' (not advised)
# when debugging, it might be useful to set it to 1 or 0
optlevel = 's'

# save debug info to .elf file
debug_info = True

include_dirs = '''
'''.split()

library_dirs = '''
'''.split()

libraries = '''
'''.split()

defines = '''
'''.split()

common_flags = '''
-Wall
-Wunused
-fpack-struct
-fshort-enums
-funsigned-bitfields
-funsigned-char
'''.split()

c_flags = '''
-std=gnu11
'''.split()

cpp_flags = '''
-fno-exceptions
-std=gnu++11
'''.split()

asm_flags = '''
-x assembler-with-cpp
-Wa
-gstabs
'''.split()

linker_flags = '''
'''.split()

linker_libraries = '''
'''.split()


# ------------ Config done ---------------

common_flags += ['-O' + optlevel, '-mmcu=' + mcu]
if debug_info:
    common_flags += ['-g', '-gdwarf-2']

linker_flags += ['-mmcu=' + mcu]

# output format for hex
hexformat = 'ihex'

import os, re, SCons.Tool

def toBuildDir(name):
    'prepends the build dir to a path'
    return os.path.join(build_dir, name)

# transform target to full path
target = toBuildDir(pname)

# determine target files
targetelf = target + '.elf'
targettxt = target + '.txt'
targetdostxt = target + '.dos.txt'
targethex = target + '.hex'
targetdisasm = target + '.s'

# transform all sources to full path
sources = map(lambda x: toBuildDir(x), sources)

# set output to build dir
VariantDir(build_dir, '.', duplicate=0)

# create environment
dummy = Environment()
if re.search('^win', dummy['PLATFORM']):
    print('Detected windows. Using MinGW')
    env = Environment(ENV = os.environ, tools = ['mingw'])
    Tool('mingw')(env)
else:
    env = Environment(ENV = os.environ)
del dummy

env['CCCOMSTR'] = "[compile c] $SOURCE"
env['CXXCOMSTR'] = "[compile c++] $SOURCE"
env['ASCOMSTR'] = "[compile asm] $SOURCE"
env['ASPPCOMSTR'] = "[compile asm] $SOURCE"
env['LINKCOMSTR'] = "[link] $SOURCE"

env['PROGSUFFIX']   = '.elf'

# executable names
env['CC'] = 'msp430-elf-gcc'
env['CXX'] = 'msp430-elf-g++'
env['OBJCOPY'] = 'msp430-elf-objcopy'
env['OBJDUMP'] = 'msp430-elf-objdump'
env['AR'] = 'msp430-elf-ar'
env['LD'] = 'msp430-elf-ld'
env['NM'] = 'msp430-elf-nm'
env['GASP'] = 'msp430-elf-gasp'
env['SIZE'] = 'msp430-elf-size'
env['MAKETXT'] = 'srec_cat'
env['MAKEDOSTXT'] = 'unix2dos'

# include dir
# env['CPPPATH'] = '/usr/include'


# set flags into the environment
env.Append(CCFLAGS = common_flags)
env.Append(CFLAGS = c_flags)
env.Append(CXXFLAGS = cpp_flags)
env.Append(ASFLAGS = asm_flags + common_flags)
env.Append(LINKFLAGS = linker_flags)

# build .elf
env.Program(
        target = targetelf, 
        source = sources, 
        LIBS = libraries + linker_libraries,
        CPPPATH = include_dirs,
        CPPDEFINES = defines,
        LIBPATH = library_dirs
)


# build .hex
env.Command(targethex, targetelf,
    Action(env['OBJCOPY'] + ' -O ' + hexformat + ' $SOURCE $TARGET', "[generate] $TARGET")
)


# build .txt (TI TXT)
env.Command(targettxt, targethex,
    Action(env['MAKETXT'] + ' -O $TARGET -TITXT $SOURCE -I', "[generate] $TARGET")
)

# build .dos.txt (TI TXT with DOS encoding)
env.Command(targetdostxt, targettxt,
    Action(env['MAKEDOSTXT'] + ' -q -n $SOURCE $TARGET', "[generate] $TARGET")
)

# create disassembly (.s)
env.Command(targetdisasm, targetelf,
    Action(env['OBJDUMP'] + ' -S $SOURCE > $TARGET', "[disassemble] $TARGET")
)

# display size
env.Command('size', targetelf, 
    Action(env['SIZE'] + ' -A $SOURCE', "\n ******** \n ")
)


# create target commands
env.Alias('elf', targetelf)
env.Alias('disasm', targetdisasm)
env.Alias('hex', targethex)
env.Alias('txt', targettxt)
# env.Alias('ehex', targeteepromhex)

# default target (scons without parameters)
Default(targetelf
    , targethex
    , targetdostxt
    , targetdisasm
    , 'size')

# all done :)
